package org.bb.vityok.novinar.ui;

import java.util.List;

import java.util.logging.Logger;

import javafx.application.Application;
import javafx.application.Platform;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.ListChangeListener;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;

import javafx.geometry.Insets;

import javafx.scene.Scene;
import javafx.scene.Node;

import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

import javafx.scene.layout.StackPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;

import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;

import javafx.stage.Stage;

import javafx.scene.text.Font;

import org.bb.vityok.novinar.Channel;
import org.bb.vityok.novinar.NewsItem;
import org.bb.vityok.novinar.Novinar;
import org.bb.vityok.novinar.Outline;


/** Primary UI controller that implements the glue binding all
 * components of the application together.
 */
public class NovinarApp extends Application {

    private Novinar novinar;

    /** Table view with the current selection of news items. */
    private TableView<NewsItem> itemsTable = null;
    private TreeView<Outline> channelsTree = null;
    private WebView itemView = null;
    private Label itemTitle = null;

    private static Logger logger = Logger.getLogger("org.bb.vityok.novinar.ui");


    public static void start(String[] args) {
        launch(args);
    }


    private HBox buildMenuBar() {
	HBox box = new HBox();
	// **** MENU BAR
	MenuBar menuBar = new MenuBar();

        // --- Menu File
        Menu menuFile = new Menu("File");

	MenuItem clear = new MenuItem("Clear");
	clear.setOnAction((ActionEvent evt) -> box.setVisible(false));
        menuFile.getItems().addAll(clear);

	MenuItem refresh = new MenuItem("Refresh feeds");
	refresh.setOnAction((ActionEvent evt) -> updateItemsTable());
        menuFile.getItems().addAll(refresh);

	MenuItem exit = new MenuItem("Exit");
	exit.setOnAction((ActionEvent evt) -> Platform.exit());
        menuFile.getItems().addAll(exit);

        // --- Menu Edit
        Menu menuEdit = new Menu("Edit");

        // --- Menu View
        Menu menuView = new Menu("View");

        menuBar.getMenus().addAll(menuFile, menuEdit, menuView);

	box.getChildren().addAll(menuBar);
	return box;
    }


    /** Encapsulates Outline and serves as the view to
     * represent its data to the user.
     */
    public class OutlineTreeItem extends TreeItem<Outline> {
	public OutlineTreeItem(Outline ol) {
	    super(ol);
	    buildChildren();
	}

        @Override
	public String toString() {
	    return ((Outline) getValue()).toString();
	}

	private void buildChildren() {
	    Outline ol = getValue();
	    if (ol != null && ol.hasChildren()) {
		List<Outline> outlines = ol.getChildren();
		if (outlines != null) {
		    ObservableList<TreeItem<Outline>> children = FXCollections.observableArrayList();
                    outlines.forEach((childOutline) -> {
                        getChildren().add(new OutlineTreeItem(childOutline));
                    });
		}
	    }
	}
    } // end class OutlineTreeItem


    /** Builds the channels tree in the left side of the window.
     *
     * Uses Outline class as a data model.
     */
    public VBox buildFeedsTree() {
	// **** FEEDS TREE
	VBox vbox = new VBox();

	novinar.loadConfig();
        // immediately store config in case if there were new channels
        // with autogenerated ids, to preserve integrity with the db
	novinar.storeConfig();

	Outline root = novinar.getRootOutline();
	TreeItem<Outline> rootItem = new OutlineTreeItem(root);
        rootItem.setExpanded(true);
        channelsTree = new TreeView<> (rootItem);
        channelsTree
            .getSelectionModel()
            .selectedItemProperty()
            .addListener((obs, oldSelection, newSelection) -> {
                    TreeItem<Outline> selectedItem = (TreeItem<Outline>) newSelection;
                    Outline outline = selectedItem.getValue();
                    selectedOutline(outline);
                });
	VBox.setVgrow(channelsTree, Priority.ALWAYS);

	vbox.getChildren().addAll(channelsTree);

	return vbox;
    }


    /** Builds the items in the list of news items. */
    private VBox buildItemsTable() {
	itemsTable = new TableView<>();

        itemsTable.setEditable(false);

        TableColumn<NewsItem,String> titleCol = new TableColumn<>("Title");
        TableColumn<NewsItem,String> authorCol = new TableColumn<>("Author");
        TableColumn<NewsItem,String> dateCol = new TableColumn<>("Date");

	titleCol.setCellValueFactory(new PropertyValueFactory<>("title"));
	authorCol.setCellValueFactory(new PropertyValueFactory<>("author"));
	dateCol.setCellValueFactory(new PropertyValueFactory<>("date"));

        itemsTable.getColumns().add(titleCol);
	itemsTable.getColumns().add(authorCol);
	itemsTable.getColumns().add(dateCol);

	itemsTable
            .getSelectionModel()
            .selectedItemProperty()
            .addListener((obs, oldSelection, newSelection) -> {
		if (newSelection != null) {
		    logger.fine("selected: " + newSelection);
		    selectedNewsItem(newSelection);
		}
	    });

        itemsTable.setOnKeyPressed(new EventHandler<KeyEvent>() {
                @Override
                public void handle(final KeyEvent keyEvent) {
                    final NewsItem selectedItem = itemsTable.getSelectionModel().getSelectedItem();

                    if (selectedItem != null) {
                        if (keyEvent.getCode().equals(KeyCode.DELETE)) {
                            itemsTable.getItems().remove(itemsTable.getItems().indexOf(selectedItem));
                        }
                    }
                }
            } );

	VBox.setVgrow(itemsTable, Priority.ALWAYS);

        final VBox vbox = new VBox();
        vbox.setSpacing(5);
        vbox.setPadding(new Insets(10, 0, 0, 10));
        vbox.getChildren().add(itemsTable);

	return vbox;
    }


    private void updateItemsTable() {
        try {
            novinar.loadFeeds();
            updateItemsTable(novinar.getRootOutline());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** Select only items from the channels selected by the user in
     * the channels tree.
     */
    private void updateItemsTable(Outline ol) {
        try {
            ObservableList<NewsItem> items = FXCollections.observableArrayList(novinar.getNewsItemsFor(ol));
            itemsTable.setItems(items);

            // track changes to the list of news items, namely, when a
            // user "removes" selected items
            items.addListener(new ListChangeListener<NewsItem>() {
                    @Override
                    public void onChanged(ListChangeListener.Change<? extends NewsItem> c) {
                        while (c.next()) {
                            if (c.wasRemoved()) {
                                for (NewsItem item : c.getRemoved()) {
                                    try {
                                        novinar.removeNewsItem(item);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }});
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private Node buildCenterPane() {
        SplitPane centerPane = new SplitPane();

        centerPane.getItems().addAll(buildFeedsTree(),
                                  buildItemsTable(),
                                  buildContentPane());
        centerPane.setDividerPositions(0.07f, 0.32f);
	return centerPane;
    }


    private VBox buildContentPane() {
	VBox vbox = new VBox();
	itemTitle = new Label("");
        itemTitle.setFont(new Font("Helvetica Bold", 16.0));

	itemView = new WebView();
	vbox.getChildren().addAll(itemTitle, itemView);
	return vbox;
    }


    /** Status bar in the bottom of the main window. */
    private HBox buildStatusBar() {
        HBox statusbar = new HBox();
        return statusbar;
    }


    /** Handle selected outline in the channels tree. Update the list
     * of news items to contain only those items associated with this
     * outline and its children (when there are any).
     */
    private void selectedOutline(Outline ol) {
        logger.fine("selected tree item, title=" + ol.getTitle());
        updateItemsTable(ol);
    }

    /** Handle news item selection in the list of the news items. */
    private void selectedNewsItem(NewsItem item) {
	if (item == null) {
	    itemView.getEngine().loadContent("<h1>Title</h1>");
	} else {
	    itemView.getEngine().loadContent(item.getDescription());
	    itemTitle.setText(item.getTitle());
	}
    }


    // LIFE CYCLE OF THE APPLICATION

    @Override
    public void init() {
	try {
            novinar = new Novinar();
	    novinar.setup();
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    @Override
    public void start(Stage primaryStage) {
	BorderPane root = new BorderPane();
	root.setTop(buildMenuBar());
	root.setCenter(buildCenterPane());
        root.setBottom(buildStatusBar());
	// populate items table with the items
	updateItemsTable();
	selectedNewsItem(null);
        Scene scene = new Scene(root);

        primaryStage.setTitle("Novinar news reader");
        primaryStage.setScene(scene);

        primaryStage.setMaximized(true);
        primaryStage.show();
    }

    @Override
    public void stop() {
	logger.info("Graceful shutdown. Bye-bye");
        try {
            novinar.storeConfig();
            novinar.close();
        } catch (Exception e) {
            logger.severe("Graceful shutdown. failed: " + e);
            e.printStackTrace();
        }
    }
}
