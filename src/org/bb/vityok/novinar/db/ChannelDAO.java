package org.bb.vityok.novinar.db;

import java.util.List;
import java.util.LinkedList;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import org.bb.vityok.novinar.Channel;


/** Implements database access operations for the Channel object.
 *
 * It is not an interface nor an abstract class but an ordinary class
 * because currently there is just one database backend (and no other
 * backends are planned) so additional abstraction is redundand.
 */
public class ChannelDAO
{
    private final static ChannelDAO instance = new ChannelDAO();

    protected ChannelDAO()
    {
    }

    public static ChannelDAO getInstance() { return instance; }


    /** Creates a new entry in the database and returns its
     * autogenerated primary key.
     */
    public int createChannelFor(String url) {
	try {
	    Backend be = Backend.getInstance();
	    Connection conn = be.getConnection();
	    PreparedStatement ps = conn.prepareStatement("INSERT INTO channel (link) VALUES (?)",
							 PreparedStatement.RETURN_GENERATED_KEYS);
	    ps.setString(1, url);
	    ps.executeUpdate();
	    ResultSet rs = ps.getGeneratedKeys();
	    if (rs.next()) {
		int key = rs.getInt(1);
		return key;
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return 0;
    }

    /** Returns the number of known/stored channels without loading
     * them all. */
    public int getChannelsCount()
	throws Exception
    {
	Backend be = Backend.getInstance();
	Connection conn = be.getConnection();
	PreparedStatement ps = conn.prepareStatement("SELECT COUNT(channel_id) AS count FROM channel");
	ResultSet rs = ps.executeQuery();
	if (rs.next()) {
	    return rs.getInt("count");
	} else {
	    return 0;
	}
    }


    public List<Channel> getAllChannels()
	throws Exception
    {
	Backend be = Backend.getInstance();
	Connection conn = be.getConnection();
	PreparedStatement ps = conn.prepareStatement("SELECT channel_id, link FROM channel");
	ResultSet rs = ps.executeQuery();
	List<Channel> channels = new LinkedList<Channel>();
	while (rs.next()) {
	    Channel chan = new Channel();
	    chan.setChannelId(rs.getInt("channel_id"));
	    chan.setLink(rs.getString("link"));
	    channels.add(chan);
	}

	return channels;
    }
}
